// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
//diagram implemented left to right

Not(in=instruction[15],out=NOTinstr15); //tells if this is an A-instruction or not

Mux16(a=ALUOut ,b=instruction ,sel=NOTinstr15 ,out=MUXOut );

//load A if: A-instr OR A-reg is a destination
Or(a=NOTinstr15,b=instruction[5],out=loadA);
ARegister(in=MUXOut ,load=loadA ,out= AOut,out[0..14]=addressM);

// The instr is C and needs M access (a == 1 i.e 12th bit == 1)
And(a= instruction[15], b=instruction[12], out= AMsel);
Mux16(a=AOut ,b=inM ,sel=AMsel ,out=ALUIn2); //MUX before ALU

//load in D if: C-instr AND D-reg is a destination
And(a=instruction[15],b=instruction[4],out=loadD);
DRegister(in=ALUOut ,load=loadD ,out=ALUIn1); //D-Register

ALU(x=ALUIn1,y=ALUIn2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOut,out=outM,zr=zr,ng=ng);

//is it zero?
Not(in=zr,out=notzr);
//is it neg?
Not(in=ng,out=notng);
//is the number positive?
And(a=notzr,b=notng,out=pos); //+ve if pos is 1;

//do we need a jump?
//Conditon: opcode has JUMP && our calculations want a jump
And(a=instruction[2], b=ng, out=negjump); // jump if negative
And(a=instruction[1], b=zr, out=zerjump); // jump if zero
And(a=instruction[0], b=pos, out=posjump); // jump if positive

//3-Way OR Gate to decide jump or not
Or(a=negjump,b=zerjump,out=j1);
Or(a=j1,b=posjump,out=jump);

//YES to jump && C-type instruction
And(a=jump, b=instruction[15], out=loadpc);

//Decide on basis of loadpc, increment and reset
PC(in=AOut ,load=loadpc ,inc=true ,reset=reset ,out[0..14]=pc );

//writeM only if: M is the dest AND C-instr
And(a=instruction[3],b=instruction[15],out=writeM);
}
